GPA_ACT <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH01PR19.txt",header = FALSE,col.names = c("GPA","ACT"))
attach(GPA_ACT)
gpa.lm = lm(GPA ~ ACT)
```{r}
boxplot(ACT)
plot(gpa.lm, which = 1)
plot(gpa.lm, which = 2)
Y_fit = predict(gpa.lm)
error = GPA - Y_fit
k = rank(error)
MSE = 0.6231^2
r = matrix(NA, length(error),1)
n = length(r)
for (i in 1:n){
r[i] = sqrt(MSE)*qnorm((k[i] - 0.375)/(n +0.25))
}
matr = cbind(r,error)
corr(matr)
?corr
cor(matr)
?cor
cor(matr)[1]
cor(matr)[2]
X = GPA_ACT[,2]
Y = GPA_ACT[,1]
X1 = which(X < 26)
X2 = which(X >=26)
resi = gpa.lm$residuals
error_X1 = resi[X1]
error_X2 = resi[X2]
med_e1 = median(error_X1)
med_e2 = median(error_X2)
d_i1 = abs(error_X1 - med_e1)
d_i2 = abs(error_X2 - med_e2)
t.test(d_i1, d_i2, conf.level = 0.99)
detach(GPA_ACT)
GPA_4var <- read.table("CH03PR03.txt",header = FALSE,col.names = c("GPA","ACT","I_Score", "Rank_perentile"))
GPA_4var <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH03PR03.txt",header = FALSE,col.names = c("GPA","ACT","I_Score", "Rank_perentile"))
attach(GPA_4var)
gpa_fit1 = lm(GPA~ I_Score, data = GPA_4var)
gpa_fit2 = lm(GPA~ Rank_perentile, data = GPA_4var)
data <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH03PR15.txt",header = FALSE, col.names = c("Y","X"))
attach(data)
plot(Y~X)
plot(log(Y) ~ X)
fit2 = lm(log(Y) ~ X)
data <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH03PR15.txt",header = FALSE, col.names = c("Y","X"))
View(data)
attach(data)
plot(Y~X)
fit1 = lm(Y ~ X)
par(mfrow = c(1,2))
plot(fit1, which =c(1,2))
Y
X
plot(data$Y~data$X)
attach(data)
fit1 = lm(Y ~ X)
par(mfrow = c(1,2))
plot(fit1, which =c(1,2))
plot(data$Y~data$X)
GPA_ACT <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH01PR19.txt",header = FALSE,col.names = c("GPA","ACT"))
attach(GPA_ACT)
gpa.lm = lm(GPA ~ ACT)
plot(log(y) ~ x)
fit2 = lm(log(y) ~ x)
data <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH03PR15.txt",header = FALSE, col.names = c("y","x"))
attach(data)
plot(y~x)
fit1 = lm(y ~ x)
data <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH03PR15.txt",header = FALSE, col.names = c("y","x"))
attach(data)
plot(y~x)
fit1 = lm(y ~ x)
par(mfrow = c(1,2))
plot(fit1, which =c(1,2))
plot(log(y) ~ x)
fit2 = lm(log(y) ~ x)
par(mfrow = c(1,2))
plot(fit2, which =c(1,2))
Y_ = 1
fit3 = lm(y_ ~ x)
y_ = log10(y)
fit3 = lm(y_ ~ x)
summary(fit3)
plot(log10(y) ~ x)
abline(fit3)
?abline
abline(coef = coef(fit3))
plot(log10(y) ~ x)
abline(coef = coef(fit3))
plot(log10(y) ~ x)
abline(coef = coef(fit3))
par(mfrow = c(1,2))
plot(fit3, which =c(1,2))
f = -log(x)/(1+x)
f = function (x){
f = -log(x)/(1 + x)
}
f(0)
f
f(0)
f(1)
f0 = f(1)
f0 = f(0)
f2 = f(2)
f = -lg(x)/(1 + x)
f = function (x){
f = -lg(x)/(1 + x)
}
f0 = f(0)
f = function (x){
f = -log(x)/(1 + x)
}
f0 = f(0)
f2 = f(2)
?curve
curve(f, from = 0 to 6)
curve(f, from = 0 ,to 6)
curve(f, from = 0,to = 6)
curve(f, from = 0,to = 6, main = "f(x) plot")
curve(f, from = 0,to = 6, main = "f(x) plot")
curve(f, from = 0,to = 10, main = "f(x) plot")
curve(f, from = 0,to = 6, main = "f(x) plot")
curve(f, from = 0,to = 100, main = "f(x) plot")
curve(f, from = 0,to = 20, main = "f(x) plot")
curve(f, from = 0,to = 6, main = "f(x) plot")
diff.quot = function(x,h){
(f(x + h) - f(x)) / h
}
diff.quot(10,0.0001)
diff.quot(2,0.0001)
curve(f, from = 0,to = 6)
curve(diff.quot, from = 0,to = 6, add = T)
curve(diff.quot(h = 0.0001), from = 0,to = 6, add = T)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T)
curve(f, from = 0,to = 6)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T)
curve(f, from = 0,to = 6)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = F)
curve(f, from = 0,to = 6)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T)
curve(f, from = 0,to = 6, ylin = c(-3,3))
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T)
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "b")
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "b")
?curve
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet)
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
?legend
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
legend("topright", legend = c("f", "diff.quot"))
legend("topright", legend = c("f", "diff.quot"), col = c(), lty=1)
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
legend("topright", legend = c("f", "diff.quot"), col = c(), lty=1)
curve(f, from = 0,to = 6, ylim = c(-3,3))
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "violet")
legend("topright", legend = c("f", "diff.quot"), col = c(), lty=1:2)
curve(f, from = 0,to = 6, ylim = c(-3,3), col = "black")
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "red")
legend("topright", legend = c("f", "diff.quot"), col = c("black", "red"))
curve(f, from = 0,to = 6, ylim = c(-3,3), col = "black")
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "red")
legend("topright", legend = c("f", "diff.quot"), col = c("black", "red"), cex = 0.8)
curve(f, from = 0,to = 6, ylim = c(-3,3), col = "black")
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "red")
legend("topright", legend = c("f", "diff.quot"), col = c("black", "red"), lty = 1)
curve(f, from = 0,to = 6, ylim = c(-3,3), col = "black", main = "f(x) and diff.quot plot")
curve(diff.quot(x,h = 0.0001), from = 0,to = 6, add = T, col = "red")
legend("topright", legend = c("f", "diff.quot"), col = c("black", "red"), lty = 1)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for i in 1:max.iter{
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for k in 1:max.iter{
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(dfx)
}
}
return dfx
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(dfx)
}
}
dfx
}
basic.grad.descent(1)
basic.grad.descent(10)
basic.grad.descent(100)
basic.grad.descent(10000)
basic.grad.descent(10)
basic.grad.descent(5)
basic.grad.descent(3)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return("diff_x" = dfx)
}
}
dfx
}
basic.grad.descent(3)
basic.grad.descent(3)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(x = x, min = f(x))
}
}
return(x = x, min = f(x))
}
basic.grad.descent(3)
basic.grad.descent(3)@x
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(x = x, min = f(x))
}
}
return(list(x = x, min = f(x)))
}
basic.grad.descent(3)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x, f(x)))
}
}
return(list(x, f(x)))
}
basic.grad.descent(3)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x = x, fx = f(x)))
}
}
return(list(x = x, fx = f(x)))
}
basic.grad.descent(3)
basic.grad.descent(3)$x
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x = x, min_value = f(x), num_itr = k, conv = TRUE))
}
}
return(list(x = x, min_value = f(x), num_itr = k, conv = FALSE))
}
basic.grad.descent(3)
basic.grad.descent(1000)
basic.grad.descent(10)
basic.grad.descent(20)
basic.grad.descent(100)
basic.grad.descent(100, step.scale = 5)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x = x, min_value = f(x), num_itr = k, conv = (i < max.iter))))
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x = x, min_value = f(x), num_itr = k, conv = (i < max.iter)))
}
}
return(list(x = x, min_value = f(x), num_itr = k, conv = (i < max.iter)))
}
basic.grad.descent(100, step.scale = 5)
basic.grad.descent =
function(x, max.iter = 1000, stop.deriv = 1e-10, h = 0.0001, step.scale = 0.5){
dfx = diff.quot(x,h)
for (k in 1:max.iter){
if (dfx < 0){
x = x + step.scale
}
else{
x = x - step.scale
}
dfx = diff.quot(x,h)
if (dfx <= stop.deriv){
return(list(x = x, min_value = f(x), num_itr = k, conv = (k < max.iter)))
}
}
return(list(x = x, min_value = f(x), num_itr = k, conv = (k < max.iter)))
}
basic.grad.descent(100, step.scale = 5)
GPA_ACT <- read.table("/Users/Yunhao/Desktop/5205/Data_Sets/Chapter_1_Data_Sets/CH01PR19.txt",header = FALSE,col.names = c("GPA","ACT"))
(2)
x1 = pnorm(2)
x1
x1 - x2
x2 = pnorm(-1)
x1 - x2
x2 = pnorm(1)
x1 - x2
x = linspace(-5,5,100)
x = linespace(-5,5,100)
x = range(-5,5,100)
x
x = c(-5,5,100)
x
x = c(-5:5)
x
x = c(-5:5,0.01)
x
install.packages("tm")
install.packages("tm")
require(devtools)
install_version("tm", version = "0.7-1", repos = "http://cran.us.r-project.org")
install.packages("tidytext")
install.packages("tidyverse")
install.packages("DT")
install.packages("shiny")
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figs/',
echo=T, warning=FALSE, message=FALSE)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("devtools")
library(devtools)
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
# install.packages("devtools")
updateR()
md5 R-3.5.2.pkg
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
R.Version()
R.Version()
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
R.Version()
library(installr)
install.packages("~/Downloads/R-3.5.2.tar.gz", repos = NULL, type = "source")
install.packages("instaR")
# install.packages("devtools")
library(installR)
install.packages("installr")
